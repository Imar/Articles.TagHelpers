<#@ template language="C#" hostSpecific="true" debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDte" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System" #>
<#
  var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
  var project = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;

  string root = Host.ResolvePath("");
  var projectItems = GetProjectItemsRecursively(project.ProjectItems);
#>
namespace <#=System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint")#>
{
  public static class SitePages
  {
<#ListPages(root + "/Pages", root + "/Pages", "cshtml", projectItems, 1);#>
  }
}

<#+
  public void ListPages(string root, string path, string fileType, List<string> projectItems, int depth)
  {
    var info = new DirectoryInfo(path);
    var folder = info.Name;
    var pages = info.GetFiles($"*.{fileType}").Where(x => !x.Name.StartsWith("_")
            && projectItems.Any(y => x.FullName == y.Replace("/", "\\"))).ToList();

    if (pages.Any() && root != path)
    {
      WriteLine($"{new string(' ', depth * 2)}public class {folder}");
      WriteLine($"{new string(' ', depth * 2)}{{");
    }
    foreach (var subFolder in Directory.GetDirectories(path))
    {
      ListPages(root, subFolder, fileType, projectItems, depth + 1);
    }
    foreach (var page in pages)
    {
      var pageName = page.Name.Replace($".{fileType}", "");
      var fileName = page.FullName.Substring(root.Length).Replace("\\", "/").Replace($".{fileType}", "");
      WriteLine($"{new string(' ', (depth + 1) * 2)}public const string {pageName} = @\"{fileName}\";");
    }

    if (pages.Any() && root != path)
    {
      WriteLine($"{new string(' ', depth * 2)}}}");
    }
  }

	public List<string> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
	{
		var ret = new List<string>();
		if (items == null) return ret;

		foreach(EnvDTE.ProjectItem item in items)
		{
			string result = item.FileNames[1].Replace("\\", "/");
			
			// If not folder.
			if (result[result.Length - 1] != '\\')
			{
				ret.Add(result);
			}
						
			ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
		}

		return ret;
	}
#>